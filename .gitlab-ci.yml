stages:
  - test
  - plan
  - apply
  - provisioning
  - destroy

include:
  - template: Security/Secret-Detection.gitlab-ci.yml

.terraform-image: &terraform-image
  image:
    name: hashicorp/terraform:light
    entrypoint:
      - '/usr/bin/env'
      - 'PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'

.terraform-before_script: &terraform-before_script
  before_script:
    - export TF_VAR_do_token=${DO_TOKEN}
    - export TF_VAR_cloudflare_zone=${CLOUDFLARE_ZONE}
    - export TF_VAR_cloudflare_token=${CLOUDFLARE_TOKEN}
    - export TF_VAR_persistent_home_volume_from_snapshot=${PERSISTENT_HOME_VOLUME_FROM_SNAPSHOT}
    - export TF_VAR_persistent_home_volume_snapshot_name=${PERSISTENT_HOME_VOLUME_SNAPSHOT_NAME}
    - export TF_VAR_persistent_home_volume_name=${PERSISTENT_HOME_VOLUME_NAME}
    - rm -rf .terraform
    - terraform --version
    - apk add -U --no-cache jq
    - jq --version
    - terraform init

terraform validate:
  stage: test
  <<: *terraform-image
  <<: *terraform-before_script
  script:
    - terraform validate

terraform plan:
  stage: plan
  <<: *terraform-image
  <<: *terraform-before_script
  script:
    - terraform plan -input=false -out "planfile"
  needs:
    - "terraform validate"
  artifacts:
    paths:
      - planfile

terraform apply:
  <<: *terraform-image
  <<: *terraform-before_script
  stage: apply
  allow_failure: false
  script: 
    - terraform apply "planfile"
    - terraform output -json | jq -r '@sh "\(.droplet_ip.value) ansible_ssh_private_key_file=../\(.droplet_ssh_key.value) ansible_user=root ansible_ssh_extra_args=\"-o StrictHostKeyChecking=no\""' > ansible/inventory
  dependencies:
    - "terraform plan"
  needs:
    - "terraform plan"
  artifacts:
    paths:
      - ansible/inventory
      - ./terraform.tfstate
      - ./files
  cache:
    paths: 
      - ./.terraform

provisioning:
  stage: provisioning
  image: alpine
  before_script:
    - apk add ansible openssh
  script:
    - cd ansible
    - ansible-playbook -i inventory playbook.yml
  dependencies:
    - "terraform apply"
  needs:
    - "terraform apply"

terraform destroy:
  <<: *terraform-image
  <<: *terraform-before_script
  stage: destroy
  script:
    - terraform destroy --auto-approve
  needs:
    - "terraform apply"
  # when: manual
  dependencies:
    - "terraform apply"